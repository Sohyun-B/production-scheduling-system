version: '3.8'

services:
  # Redis 서비스
  redis:
    image: redis:7-alpine
    container_name: scheduling-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped

  # Python API 서비스
  python-api:
    build:
      context: ./python_engine
      dockerfile: Dockerfile
    container_name: scheduling-python-api
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379/0
      - SESSION_TIMEOUT=3600
    depends_on:
      - redis
    volumes:
      - ./python_engine/data:/app/data
      - ./python_engine/logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node.js 백엔드 서비스
  node-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: scheduling-node-backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - PYTHON_API_URL=http://python-api:8000
      - REDIS_URL=redis://redis:6379/0
      - FRONTEND_URL=http://localhost:3000
    depends_on:
      - python-api
      - redis
    volumes:
      - ./backend/logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React 프론트엔드 서비스
  react-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: scheduling-react-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:3001
    depends_on:
      - node-backend
    restart: unless-stopped

volumes:
  redis_data:

networks:
  default:
    name: scheduling-network
